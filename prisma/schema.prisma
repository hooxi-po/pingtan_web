generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  username              String?               @unique
  password              String
  name                  String?
  avatar                String?
  phone                 String?
  role                  UserRole              @default(USER)
  language              String                @default("zh")
  points                Int                   @default(0)
  isVerified            Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  comments              Comment[]
  favorites             Favorite[]
  itineraries           Itinerary[]
  orders                Order[]
  posts                 Post[]
  reviews               Review[]
  notifications         Notification[]
  notificationConfigs   NotificationConfig[]

  @@map("users")
}

model Attraction {
  id             String             @id @default(cuid())
  name           String
  nameEn         String?
  nameTw         String?
  description    String
  descriptionEn  String?
  descriptionTw  String?
  category       AttractionCategory
  address        String
  latitude       Float
  longitude      Float
  images         String[]
  videos         String[]
  vrUrl          String?
  openTime       String?
  closeTime      String?
  ticketPrice    Float?
  rating         Float              @default(0)
  reviewCount    Int                @default(0)
  isActive       Boolean            @default(true)
  tags           String[]
  features       String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  favorites      Favorite[]
  itineraryItems ItineraryItem[]
  orders         Order[]
  reviews        Review[]

  @@map("attractions")
}

model Accommodation {
  id            String            @id @default(cuid())
  name          String
  nameEn        String?
  nameTw        String?
  description   String
  descriptionEn String?
  descriptionTw String?
  type          AccommodationType
  address       String
  latitude      Float
  longitude     Float
  images        String[]
  amenities     String[]
  roomTypes     Json[]
  priceRange    String
  rating        Float             @default(0)
  reviewCount   Int               @default(0)
  isActive      Boolean           @default(true)
  contactPhone  String?
  contactEmail  String?
  checkInTime   String?
  checkOutTime  String?
  policies      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  favorites     Favorite[]
  orders        Order[]
  reviews       Review[]
  rooms         Room[]

  @@map("accommodations")
}

model Room {
  id              String        @id @default(cuid())
  accommodationId String
  name            String
  nameEn          String?
  nameTw          String?
  description     String?
  images          String[]
  maxGuests       Int
  bedType         String
  size            Float?
  price           Float
  isAvailable     Boolean       @default(true)
  amenities       String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orders          Order[]
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model Restaurant {
  id            String     @id @default(cuid())
  name          String
  nameEn        String?
  nameTw        String?
  description   String
  descriptionEn String?
  descriptionTw String?
  cuisine       String[]
  address       String
  latitude      Float
  longitude     Float
  images        String[]
  priceRange    String
  rating        Float      @default(0)
  reviewCount   Int        @default(0)
  isActive      Boolean    @default(true)
  contactPhone  String?
  openHours     String?
  specialties   String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  favorites     Favorite[]
  orders        Order[]
  reviews       Review[]

  @@map("restaurants")
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  type            OrderType
  status          OrderStatus    @default(PENDING)
  totalAmount     Float
  paymentMethod   String?
  paymentStatus   PaymentStatus  @default(PENDING)
  bookingDate     DateTime?
  checkInDate     DateTime?
  checkOutDate    DateTime?
  guestCount      Int?
  specialRequests String?
  contactName     String
  contactPhone    String
  contactEmail    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  attractionId    String?
  accommodationId String?
  roomId          String?
  restaurantId    String?
  isPriority      Boolean        @default(false)
  priority        OrderPriority  @default(LOW)
  priorityScore   Int            @default(0)
  urgencyLevel    UrgencyLevel   @default(NORMAL)
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id])
  attraction      Attraction?    @relation(fields: [attractionId], references: [id])
  restaurant      Restaurant?    @relation(fields: [restaurantId], references: [id])
  room            Room?          @relation(fields: [roomId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  notifications   Notification[]

  @@index([userId, status])
  @@index([priority, status])
  @@index([isPriority])
  @@map("orders")
}

model Notification {
  id              String              @id @default(cuid())
  userId          String
  orderId         String?
  type            NotificationType
  channel         NotificationChannel
  status          NotificationStatus  @default(PENDING)
  priority        NotificationPriority @default(NORMAL)
  title           String
  content         String
  templateId      String?
  metadata        Json?               // 额外的通知元数据
  scheduledAt     DateTime?           // 计划发送时间
  sentAt          DateTime?           // 实际发送时间
  deliveredAt     DateTime?           // 送达确认时间
  readAt          DateTime?           // 阅读时间（站内信）
  retryCount      Int                 @default(0)
  maxRetries      Int                 @default(3)
  lastRetryAt     DateTime?
  errorMessage    String?
  externalId      String?             // 第三方服务返回的ID
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id])
  order           Order?              @relation(fields: [orderId], references: [id])
  template        NotificationTemplate? @relation(fields: [templateId], references: [id])

  @@index([userId, status])
  @@index([type, status])
  @@index([channel, status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationTemplate {
  id              String              @id @default(cuid())
  name            String              @unique
  type            NotificationType
  channel         NotificationChannel
  title           String
  content         String              // 支持模板变量，如 {{userName}}, {{orderAmount}}
  isActive        Boolean             @default(true)
  variables       String[]            // 模板变量列表
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  notifications   Notification[]

  @@index([type, channel])
  @@map("notification_templates")
}

model NotificationConfig {
  id              String              @id @default(cuid())
  userId          String
  channel         NotificationChannel
  isEnabled       Boolean             @default(true)
  preferences     Json?               // 用户偏好设置
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id])

  @@unique([userId, channel])
  @@map("notification_configs")
}

model Review {
  id              String         @id @default(cuid())
  userId          String
  rating          Int
  content         String
  images          String[]
  isRecommended   Boolean        @default(true)
  isVerified      Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  attractionId    String?
  accommodationId String?
  restaurantId    String?
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id])
  attraction      Attraction?    @relation(fields: [attractionId], references: [id])
  restaurant      Restaurant?    @relation(fields: [restaurantId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Favorite {
  id              String         @id @default(cuid())
  userId          String
  createdAt       DateTime       @default(now())
  attractionId    String?
  accommodationId String?
  restaurantId    String?
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id])
  attraction      Attraction?    @relation(fields: [attractionId], references: [id])
  restaurant      Restaurant?    @relation(fields: [restaurantId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@unique([userId, attractionId])
  @@unique([userId, accommodationId])
  @@unique([userId, restaurantId])
  @@map("favorites")
}

model Itinerary {
  id          String          @id @default(cuid())
  userId      String
  title       String
  description String?
  days        Int
  budget      Float?
  isPublic    Boolean         @default(false)
  likes       Int             @default(0)
  views       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  items       ItineraryItem[]

  @@map("itineraries")
}

model ItineraryItem {
  id           String      @id @default(cuid())
  itineraryId  String
  attractionId String?
  day          Int
  order        Int
  startTime    String?
  endTime      String?
  notes        String?
  createdAt    DateTime    @default(now())
  attraction   Attraction? @relation(fields: [attractionId], references: [id])
  itinerary    Itinerary   @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@map("itinerary_items")
}

model Post {
  id          String       @id @default(cuid())
  userId      String
  title       String
  content     String
  images      String[]
  videos      String[]
  tags        String[]
  category    PostCategory
  likes       Int          @default(0)
  views       Int          @default(0)
  isPublished Boolean      @default(true)
  isFeatured  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comments    Comment[]
  user        User         @relation(fields: [userId], references: [id])

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Event {
  id                  String        @id @default(cuid())
  title               String
  titleEn             String?
  titleTw             String?
  description         String
  descriptionEn       String?
  descriptionTw       String?
  category            EventCategory
  startDate           DateTime
  endDate             DateTime
  location            String
  latitude            Float?
  longitude           Float?
  images              String[]
  price               Float?
  maxParticipants     Int?
  currentParticipants Int           @default(0)
  isActive            Boolean       @default(true)
  contactInfo         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("events")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  nameEn         String?
  nameTw         String?
  description    String
  descriptionEn  String?
  descriptionTw  String?
  category       ProductCategory
  price          Float
  images         String[]
  stock          Int             @default(0)
  isActive       Boolean         @default(true)
  origin         String?
  specifications String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("products")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum UserRole {
  USER
  MERCHANT
  ADMIN
}

enum AttractionCategory {
  BLUE_TEARS
  STONE_HOUSE
  COASTAL_ROAD
  ISLAND_EXPERIENCE
  VILLAGE
  BEACH
  MOUNTAIN
  CULTURAL
  ECOLOGICAL
}

enum AccommodationType {
  STONE_HOUSE_HOMESTAY
  BOUTIQUE_HOTEL
  GUESTHOUSE
  RESORT
  FARMSTAY
}

enum OrderType {
  ATTRACTION
  ACCOMMODATION
  RESTAURANT
  PACKAGE
  EXPERIENCE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UrgencyLevel {
  NORMAL
  TIME_SENSITIVE
  LAST_MINUTE
  VIP
}

enum PostCategory {
  TRAVEL_GUIDE
  PHOTO_SHARE
  VIDEO_SHARE
  EXPERIENCE
  FOOD_REVIEW
  ACCOMMODATION_REVIEW
}

enum EventCategory {
  FESTIVAL
  CULTURAL
  SPORTS
  FOOD
  WORKSHOP
  TOUR
}

enum ProductCategory {
  SEAFOOD
  NOODLES
  SEAWEED
  HANDICRAFT
  SOUVENIR
  LOCAL_SNACK
}

enum NotificationType {
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  ORDER_CONFIRMED
  ORDER_CANCELLED
  ORDER_REFUNDED
  BOOKING_REMINDER
  SYSTEM_ANNOUNCEMENT
  PROMOTIONAL
  SECURITY_ALERT
}

enum NotificationChannel {
  SMS
  EMAIL
  IN_APP
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
